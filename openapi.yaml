openapi: 3.0.2
info:
  title: OAuth Authorization Server API
  description: Definition of the REST API exported by the OAuth Authorization Server.
  version: 0.1.0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: 'http://localhost:8000/v0'
    description: "Local test environment"

components:
  securitySchemes:
    apiAuthentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Models related to User authentication against the Authorization Server (no OAuth)
    UserLoginInput:
      type: object
      description: Credentials of the user to authenticate.
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username of the user to authenticate.
          example: "jdoe"
        password:
          type: string
          description: Password of the user to authenticate.
          example: "mysecretpassword"
    
    AuthenticationToken:
      type: object
      description: Authentication token for a successfully authenticated user.
      properties:
        token:
          type: string
          description: Authentication token
          example: "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg"
    
    # Model related to OAuth client registration
    ClientInput:
      type: object
      description: Model used for registering new clients in the Authorization Server.
      properties:
        name:
          type: string
          description: Name of the client (for instance the application name).
          example: "My Application"
        url:
          type: string
          description: URL to the main page of the client application.
          format: uri
          example: "https://myapplication.example.org"
        redirect_uri:
          type: string
          description: URL to the callback used in the Authorization Code flow.
          format: uri
          example: "https://myapplication.example.org/authorize"
      required:
        - name
        - url
        - redirect_uri
    
    Client:
      type: object
      description: Model for application clients registered in the Authorization Server.
      properties:
        client_id:
          type: string
          description: Unique identifier of the client, used for exchanging OAuth tokens.
          example: ea725a09-5a42-4230-8d6a-34ea5a51375d
          format: uuid
        client_secret:
          type: string
          description: Randomly generated secret associated to the client, used for exchanging OAuth tokens.
          example: as5fsa222vae3ASd5
        name:
          type: string
          description: Name of the client (for instance the application name).
          example: "My Application"
        url:
          type: string
          description: URL to the main page of the client application.
          format: uri
          example: "https://myapplication.example.org"
        redirect_uri:
          type: string
          description: URL to the callback used in the Authorization Code flow.
          format: uri
          example: "https://myapplication.example.org/authorize"
        owner:
          type: string
          description: User who registered the client.
          example: "jdoe"
      required:
        - client_id
        - client_secret
        - name
        - url
        - redirect_uri
        - owner
    
    # Models related to OAuth 2.0 defined endpoints
    OAuthAuthorizeResponse:
      type: object
      description: Response sent back by the Authorization Server when an OAuth authorization request is performed.
      properties:
        code:
          type: string
          description: Authorization Code sent to the callback so it can be used to obtain an access token. Contents are encrypted so only the Authorization Server can access the token information.
          example: "eYJasd454vdsfs2awvbpoy4"
        redirect_uri:
          type: string
          format: uri
          description: URL of the client where the UI should redirect the user to complete the authorization flow. This url contains all the required query params.
          example: "https://myapplication.example.org/authorize"
      required:
        - code
        - redirect_uri
        
    OAuthTokenInput:
      type: object
      properties:
        grant_type:
          type: string
          description: The grant type for the Authentication Flow required.
          enum: ["authorization_code", "password", "client_credentials"]
          example: "authorization_code"
        code:
          type: string
          description: Authorization Code received by the Authorize phase. (Authorization Code Flow - REQUIRED)
          example: "eYJasd454vdsfs2awvbpoy4"
        redirect_uri:
          type: string
          example: "https://myapplication.example.org/authorize"
          description: Must be identical to the redirect URI used in the Authorization phase. (Authorization Code Flow - REQUIRED)
        client_id:
          type: string
          description: Unique identifier of the client that requests the access token.
          example: "ea725a09-5a42-4230-8d6a-34ea5a51375d"
          format: uuid
        client_secret:
          type: string
          description: The client’s secret. This ensures that the request to get the access token is made only from the client. (Authorization Code and Client Credentials Flows - REQUIRED)
          example: "as5fsa222vae3ASd5"
        username:
          type: string
          description: The user’s username that they entered in the client application. (Password Flow - REQUIRED)
          example: "jdoe"
        password:
          type: string
          description: The user’s password that they entered in the client application. (Password Flow - REQUIRED)
          example: "jdoe"
        scope:
          type: string
          example: "email picture"
          description: One or more scope values indicating which parts of the user's account the client wish to access. (Password and Client Credentials Flows - OPTIONAL)
      required:
        - grant_type
        - client_id
        
    OAuthTokenResponse:
      type: object
      description: Response sent back by the Authorization Server when an OAuth token request is performed.
      properties:
        access_token:
          type: string
          description: Access token for the client and user, which can be used to access Resource Servers. It's a JWT token, which can be decoded with the Authorization Server public key.
          example: "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.VFb0qJ1LRg_4ujbZoRMXnVkUgiuKq5KxWqNdbKq_G9Vvz-S1zZa9LPxtHWKa64zDl2ofkT8F6jBt_K4riU-fPg"
        token_type:
          type: string
          description: The type of token this is, typically just the string “bearer”.
          example: "bearer"
        expires_in:
          type: number
          description: Time in seconds until token expiration.
          example: 3600
      required:
        - access_token
        - token_type
        - expires_in

    # Error model
    Error:
      type: object
      description: Wrapper for error responses.
      properties:
        error_type:
          type: string
          description: Type of the error that has happened.
          example: service.MyError
        error_reason:
          type: string
          description: Reason of the error that has happened.
          example: An error occured
      required: 
        - error_type
        - error_reason

  responses:
    BadRequest:
      description: Invalid request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized, you need to provide a valid authentication token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedFailure:
      description: An unexpected failure happened.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:
    ClientId:
      in: path
      name: clientId
      schema:
        type: string
      required: true
      description: Unique client_id associated to the client.

security:
  - apiAuthentication: []

paths:
  # Authentication-related paths
  /auth/sign-in:
    post:
      security: []
      summary: Obtains an authentication token for a regsitered user.
      description: >
        This endpoint allows to authenticate a User against the server IDP (Identity Provider)
        and obtains an authentication token to serve as session to interact with the rest of the
        endpoints of the Authorization Server, including the OAuth Authorize endpoint.
      operationId: signIn
      tags: 
        - "Authentication"
      requestBody:
        required: true
        description: Credentials of the user to authenticate.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
      responses:
        '200':
          description: Authentication token succesfully generated
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AuthenticationToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials to perform authentication. Either username or password is incorrect.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedFailure'
          
  # Client-related paths
  /clients:
    summary: Represents the collection of clients.
    description: This resource represents the collection of clients registered in the Authorization Server.
    get:
      summary: Obtains all the visible clients registered in the Authorization Server.
      description: >
        This endpoint allows to obtain all the clients registered in the Authorization Server which are visible to
        the user who performs the call, that is, the clients owned (created) by this user.
      operationId: getAllClients
      tags: 
        - "Client"
      responses:
        '200':
          description: List of clients.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedFailure'
    post:
      summary: Registers a new client in the Authorization Server.
      description: >
        This endpoint allows to register a new client in the Authorization Server. When the client is registered,
        random "client_id" and "client_secret" are generated for the client so it can perform the OAuth Authorization
        flows. The user who performs the client registration are set as owner, so it's the only one who can query the
        client and its associated secret.
      operationId: registerClient
      tags:
        - "Client"
      requestBody:
        description: Definition of the client to register.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInput'
      responses:
        '201':
          description: Client successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedFailure'
  /clients/{clientId}:
    parameters:
      - $ref: '#/components/parameters/ClientId'
    get:
      summary: Obtains the client with the given client_id.
      description: >
        This endpoint allows to obtain the information about the client registered with the given
        client_id. It returns the client_secret, so it can be queried after client registration. To ensure
        that the user has permission to see the client_secret, only the client owner is allowed to query
        the client information.
      operationId: getClient
      tags: 
        - "Client"
      responses:
        '200':
          description: Client with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: The user who performs the operation is not the Client owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedFailure'
    delete:
      summary: Removes the client with the given client_id.
      description: >
        This endpoint allows to the client with the given client_id from the Authorization Server.
        Only the client owner can remove it.
      operationId: deleteClient
      tags: 
        - "Client"
      responses:
        '200':
          description: Client successfully deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: The user who performs the operation is not the Client owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedFailure'
          
  # OAuth related endpoints
  /oauth/authorize:
    post:
      summary: Authorizes a client to act on behalf of the user in the Authorization Code OAuth flow.
      description: >
        This endpoint performs the first step in the OAuth 2 Authorization Code flow. When a call to this
        endpoint is performed by an authenticated user, it means that the user is authorizing the client
        defined by the client_id to act on his behalf and therefore to obtain an access token.
        
        The frontend MUST redirect the user to the returned redirect_uri in order to continue with the
        authorization flow.
      operationId: authorizeOAuthClient
      tags: 
        - "OAuth 2.0"
      parameters:
        - in: query
          name: response_type
          schema:
            type: string
            enum: ["code"]
            example: "code"
          description: Indicates that the client expects to receive an authorization code.
          required: true
        - in: query
          name: client_id
          schema:
            type: string
            example: "ea725a09-5a42-4230-8d6a-34ea5a51375d"
          description: The client_id received when the client was registered.
          required: true
        - in: query
          name: redirect_uri
          schema:
            type: string
            example: "https://myapplication.example.org/authorize"
          description: Indicates the URI to return the user to after authorization is complete.
          required: false
        - in: query
          name: scope
          schema:
            type: string
            example: "email picture"
          description: One or more scope values indicating which parts of the user's account the client wish to access.
          required: false
        - in: query
          name: state
          schema:
            type: string
            example: "as342fsdf%4"
          description: A client provided string which will be returned to the client in the callback endpoint, and can be used to store session information.
          required: false
      responses:
        '200':
          description: Authorization code generated for the client_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAuthorizeResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedFailure'
  /oauth/token:
    post:
      summary: Allows a client to obtain an access token to access protected resources.
      description: >
        This endpoint allows a client to request an access token in order to access protected resources.
        Depending on the grant_type, this token can be to act on behalf of a given user or by the client
        itself.
        
        The access token is a JWT token signed with the public key of the authorization server and which
        contain the following information.
          - sub (username or client_id, depending on the entity which holds the permission).
          - client_id (client who acts on behalf of the subject).
          - name (name of the authenticated user).
          - email (email of the authenticated user).
          - picture (url to the user profile picture).
          
        Resource servers can verify the token integrity and expiration and get the requesting user from
        this token.
      security: []
      operationId: getOAuthToken
      tags: 
        - "OAuth 2.0"
      requestBody:
        description: Definition of the client to register.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthTokenInput'
      responses:
        '200':
          description: Access token generated for the client_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedFailure'
